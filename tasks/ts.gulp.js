'use strict';

var gulp = require('gulp'),
    gulpInject = require('gulp-inject'),
    ts = require('gulp-typescript'),
    tslint = require('gulp-tslint'),
    sourcemaps = require('gulp-sourcemaps'),
    del = require('del'),
    concat = require('gulp-concat');

/**
 * inject compiles ts into the index.html
 */
gulp.task('ts-inject', ['ts-compile'], function () {
    return gulp.src('app/index.html')
        .pipe(gulpInject(gulp.src('target/tmp/js/all.js'), {relative: true}))
        .pipe(gulp.dest('app'));
});

/**
 * compile all typescript files and sourcemaps from /app and output them to /target/tmp
 */
gulp.task('ts-compile', ['ts-lint'], function () {

    var tsProject = ts.createProject({
            "compilerOptions": {
                "target": "es5",
                "sourceMap": true,
                "declarationFiles": true,
                "noExternalResolve": false,
                "sortOutput": true
            }
        }),

        tsResult = gulp.src(['app/**/*.ts', '!app/bower_components/**/*'])
            .pipe(sourcemaps.init())
            .pipe(ts(tsProject));

    return tsResult.js
        .pipe(concat('all.js'))
        .pipe(sourcemaps.write('../maps'))
        .pipe(gulp.dest('target/tmp/js'));
});

/**
 * lint all TypeScript files.
 */
gulp.task('ts-lint', function () {
    return gulp.src(['app/**/*.ts', '!app/bower_components/**/*'])
        .pipe(tslint())
        .pipe(tslint.report('prose'));
});

/**
 * Remove all generated JavaScript files from TypeScript compilation.
 */
gulp.task('ts-clean', function (cb) {
    var typeScriptGenFiles = [
        'target/tmp/js/**/*.js',    // path to all autogenerated JS files
        'target/tmp/js/**/*.js.map' // path to all autogenerated sourcemap files
    ];

    del(typeScriptGenFiles, cb);
});
