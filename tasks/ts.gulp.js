'use strict';

var gulp = require('gulp'),
    tsc = require('gulp-typescript'),
    tslint = require('gulp-tslint'),
    sourcemaps = require('gulp-sourcemaps'),
    eventStream = require('event-stream'),
    del = require('del');

function compileTS(opt) {
    var tsResult = gulp.src(opt.inPath)
        .pipe(sourcemaps.init()) // sourcemaps will be generated
        .pipe(tsc(opt.tsProject, undefined, tsc.reporter.fullReporter(true)));

    return eventStream.merge( // this task is finished when the IO of both operations are done
        tsResult.dts.pipe(gulp.dest(opt.outDefPath)),
        tsResult.js
            .pipe(sourcemaps.write()) // sourcemaps are added to the .js file
            .pipe(gulp.dest(opt.outJsPath))
    );
}

function compileAppScripts() {
    var tsProject = tsc.createProject('tsconfig.json'),
        opt = {
            tsProject: tsProject,
            inPath: 'app/**/*.ts',
            outDefPath: 'target/tmp/definitions/app',
            outJsPath: 'target/tmp/js/app',
            outJsFile: 'output.js'
        };

    return compileTS(opt);
}

/**
 * lint all TypeScript files.
 */
gulp.task('ts-lint', function () {
    return gulp.src(['app/**/*.ts', '!app/bower_components/**/*']).pipe(tslint()).pipe(tslint.report('prose'));
});

/**
 * compile TypeScript and include references to library and app .d.ts files.
 */
gulp.task('ts-compile', ['ts-lint'], function () {
    return compileAppScripts();
});

/**
 * Remove all generated JavaScript files from TypeScript compilation.
 */
gulp.task('ts-clean', function (cb) {
    var typeScriptGenFiles = [
        'target/tmp/js/**/*.js',    // path to all autogenerated JS files
        'target/tmp/js/**/*.js.map' // path to all autogenerated sourcemap files
    ];

    del(typeScriptGenFiles, cb);
});
